<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robin Verton</title>
    <link>http://robinverton.de/</link>
    <description>Recent content on Robin Verton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <lastBuildDate>Mon, 19 Jun 2017 13:15:12 +0200</lastBuildDate>
    
	<atom:link href="http://robinverton.de/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google CTF 2017, joe, web</title>
      <link>http://robinverton.de/ctf/googlectf-2017-joe-web/</link>
      <pubDate>Mon, 19 Jun 2017 13:15:12 +0200</pubDate>
      
      <guid>http://robinverton.de/ctf/googlectf-2017-joe-web/</guid>
      <description>Joe, your intelligent conversation partner For the Joe challenge, you got access to a simple page which looked like a chat. Over a text box you were able to talk with Joe, an &amp;ldquo;intelligent&amp;rdquo; converation partner/bot.
Joe had a few functionalities:
 Print out Joe&amp;rsquo;s name Set a new name Some small talk stuff Report a bug to an admin  The challenge description already told us to steal the admin cookie, so the last functionality (report a bug) was a good guess how we can interact with the admin.</description>
    </item>
    
    <item>
      <title>ASIS CTF 2017, Tar Bomb, Web129</title>
      <link>http://robinverton.de/ctf/asisctf-2017-tar-bomb-web129/</link>
      <pubDate>Sun, 26 Mar 2017 13:15:12 +0200</pubDate>
      
      <guid>http://robinverton.de/ctf/asisctf-2017-tar-bomb-web129/</guid>
      <description>This was not a typical web challenge, apart from beeing accessible over the web. The aim was to successfully execute a tar command (and do something usefull with it). The returned code of executed tar command was then returned to the user. I always got a &amp;ldquo;tar returned 2&amp;rdquo;, meaning that the file I was trying to (un)tar was not found. Chars to travers or inject were all filtered.</description>
    </item>
    
    <item>
      <title>VolgaCTF, web200 (Share Point)</title>
      <link>http://robinverton.de/ctf/volgactf-web200-sharepoint/</link>
      <pubDate>Sun, 26 Mar 2017 13:15:12 +0200</pubDate>
      
      <guid>http://robinverton.de/ctf/volgactf-web200-sharepoint/</guid>
      <description>The only accessible page for Share Point was a login form. After fiddling with the login, I noticed that you were able to login with some basic credentials like admin1111:password or admin11111:password. In the member area we had three possibilities:
 Upload a file View Files Shared Files Logout  Firt I tried to upload some .php files, which did not work (only some extensions like .jpg or .txt were allowed).</description>
    </item>
    
    <item>
      <title>stuff</title>
      <link>http://robinverton.de/stuff/</link>
      <pubDate>Tue, 14 Feb 2017 10:49:43 +0100</pubDate>
      
      <guid>http://robinverton.de/stuff/</guid>
      <description>.projects
 explo - machine and human readable web exploits xssmap - (DOM)XSS scanner webanalyze - uncovers technologies used on websites.  .exploits
 cowroot.c - first weaponized DirtyCow exploit  .ctf
 Google CTF &amp;lsquo;17, web (Joe) - session fixiation and xss ASIS CTF &amp;lsquo;17, web129 (Tar Bomb) - command injection VolgaCTF &amp;lsquo;17, web200 (SharePoint) - abusing a file upload nullcon &amp;lsquo;17, pwn200 - format string .got overwrite  .</description>
    </item>
    
    <item>
      <title>nullcon 2017, pwn200</title>
      <link>http://robinverton.de/ctf/nullcon17-pwn200/</link>
      <pubDate>Sun, 12 Feb 2017 13:48:18 +0200</pubDate>
      
      <guid>http://robinverton.de/ctf/nullcon17-pwn200/</guid>
      <description>Exploitation was straight forward by abusing a format string vulnerability to overwrite .got. The strchr was called immediately after the printf call with our passed string as an argument, so it was only needed to overwrite this with the address of system.
 </description>
    </item>
    
    <item>
      <title>Solving ROP primer level2</title>
      <link>http://robinverton.de/blog/2016/11/04/solving-rop-primer-level2/</link>
      <pubDate>Fri, 04 Nov 2016 16:01:51 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2016/11/04/solving-rop-primer-level2/</guid>
      <description>Some days ago I started reading into Return Oriented Programming and had a lot of fun doing some VMs and exercises I found over the internet. ROP is a technique which allows attackers to execute code in the presence of defense mechanism like DEP/NX. I&amp;rsquo;m not explaining what ROP is and how it is done, because a lot of other people have done this already.
Instead I want to share a solution I made for the second level of a VM called ROP Primer v0.</description>
    </item>
    
    <item>
      <title>CVE-2016-5195 (Dirtycow) Local Root PoC</title>
      <link>http://robinverton.de/blog/2016/10/23/cve-2016-5195-dirtycow-local-root-poc/</link>
      <pubDate>Sun, 23 Oct 2016 16:00:29 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2016/10/23/cve-2016-5195-dirtycow-local-root-poc/</guid>
      <description>After the proof of concept code for CVE-2016-5195 (DirtyCow) was released, the game was on to &amp;lsquo;weaponize&amp;rsquo; this PoC to a full local root privilege escalation. Because this bug was not that complicated, I began working on a simple modified version which is able to spawn a root shell.
My initial idea was something like this:
 Get the size of a SUID binary and make a backup. Overwrite this binary with a simple shell (ELF file) plus padding (so it&amp;rsquo;s the same size as the SUID binary).</description>
    </item>
    
    <item>
      <title>Webanalyze, utility to uncover technologies used on websites.</title>
      <link>http://robinverton.de/blog/2015/05/13/webanalyze-utility-to-uncover-technologies-used-on-websites./</link>
      <pubDate>Wed, 13 May 2015 15:59:22 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2015/05/13/webanalyze-utility-to-uncover-technologies-used-on-websites./</guid>
      <description>webanalyze is a (Go) port of wappalyzer, a browser extension to display technologies used on websites.
To use this in a performant way to test hundreds of hosts simultaneously I rewrote this project in Go. It&amp;rsquo;s not as accurate as the extension because of the missing javascript executing, but most of apps are found correctly.
webanalze can be used as a standalone tool (e.g. to generate a JSON output) or as a lib.</description>
    </item>
    
    <item>
      <title>Announcing pentrack.io</title>
      <link>http://robinverton.de/blog/2014/08/04/announcing-pentrack.io/</link>
      <pubDate>Mon, 04 Aug 2014 15:57:16 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2014/08/04/announcing-pentrack.io/</guid>
      <description>It&amp;rsquo;s been a long time I&amp;rsquo;m working on this and I&amp;rsquo;m happy to announce my new project: pentrack.io.
PenTrack is a server platform to track found issues during a security audit. Categorize and classify your issues, document them and invite your customer so they can flag issues as fixed. There is a lot of more, so if you are interested I suggest you to take a look at it and register for a free trial.</description>
    </item>
    
    <item>
      <title>How extundelete saved my day</title>
      <link>http://robinverton.de/blog/2014/05/15/how-extundelete-saved-my-day/</link>
      <pubDate>Thu, 15 May 2014 15:54:56 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2014/05/15/how-extundelete-saved-my-day/</guid>
      <description>While setting up a remote backup storage I did a fatal mistake. I needed some seconds to understand what I had done wrong, but after hitting arrow-up a few times to see my command history I got it: I removed all of my images. Damn. I already had a backup of most of my images on an external drive, but there were lately added some new images, so not everything was backed up.</description>
    </item>
    
    <item>
      <title>Be careful when going client only (Firebase)</title>
      <link>http://robinverton.de/blog/2013/08/27/be-careful-when-going-client-only-firebase/</link>
      <pubDate>Tue, 27 Aug 2013 15:53:25 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2013/08/27/be-careful-when-going-client-only-firebase/</guid>
      <description>Firebase, the scalable real-time backend Developing client-only applications with JavaScript and services like Firebase offer a nice way to &amp;ldquo;build apps without managing servers&amp;rdquo;. However, sometimes it&amp;rsquo;s not a bad idea to have some controlling server between your client and your data storage.
When recently browsing over firebase.com and looking at one of their code examples to get a simple overview of their service, I was surprised how easy it is for clients to interact with the data storage/backend.</description>
    </item>
    
    <item>
      <title>Drupal Security Scanner</title>
      <link>http://robinverton.de/blog/2012/10/23/drupal-security-scanner/</link>
      <pubDate>Tue, 23 Oct 2012 15:52:05 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2012/10/23/drupal-security-scanner/</guid>
      <description>DPscan.py to DrupalScan Recently I was in the need of a simple &amp;ldquo;drupal security scanner&amp;rdquo; which enumerates all modules of a drupal project so I can do a source code audit on them. The only thing I could found for this were some you-have-to-be-a-member sites and a script called WPscan.py. Because the author&amp;rsquo;s site of the script was not accessible I decided to write an own little tool in ruby which can be easily plugged into another project I&amp;rsquo;m currently realising.</description>
    </item>
    
    <item>
      <title>Cracking salted MD5 with Hashcat</title>
      <link>http://robinverton.de/blog/2012/07/15/cracking-salted-md5-with-hashcat/</link>
      <pubDate>Sun, 15 Jul 2012 15:49:36 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2012/07/15/cracking-salted-md5-with-hashcat/</guid>
      <description>Some days ago during a pentest I found a critical sql injection vulnerability which gave me access to the user database. Most of the time finding this kind of vulnerability and extracting some data from the database is enough as an proof of concept, but in this particular pentest I needed to gain access to the backend administration.
Sadly there was no way to insert data into the user table so it was not possible to create an admin account for me.</description>
    </item>
    
    <item>
      <title>EPLUS Group (mobile network operator) security issue (SMS flood, MSISDN verification)</title>
      <link>http://robinverton.de/blog/2011/11/16/eplus-group-mobile-network-operator-security-issue-sms-flood-msisdn-verification/</link>
      <pubDate>Wed, 16 Nov 2011 15:48:45 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2011/11/16/eplus-group-mobile-network-operator-security-issue-sms-flood-msisdn-verification/</guid>
      <description>Some months ago (16th of Sep.) I found a security issue on an EPLUS service page, which allows you to send as much SMS as you want to their customers (only numbers from the EPLUS group are affected) with a special message.
During my tests I found that the only limit you are faced with in sending SMS is the bandwidth of your connection/their server. The SMS is send by a service hotline number and can not be traced back to you.</description>
    </item>
    
    <item>
      <title>Simple GET/POST Crawler (Python)</title>
      <link>http://robinverton.de/blog/2011/06/30/simple-get/post-crawler-python/</link>
      <pubDate>Thu, 30 Jun 2011 15:47:08 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2011/06/30/simple-get/post-crawler-python/</guid>
      <description>Some weeks ago I wrote a little tool to support me when analysing webpages. The python tool recursive crawls all links from a page, collects the GET-Parameter and filters out the FORM-Data. Simple! The actual crawling- and parsing-method is located in the LinkCrawler.py which makes use of the BeautifulSoup library. You can easily include it in your own scripts:
links =	LinkCrawler.LinkCrawler(url, layer=1, quiet=False)  I also added a little script to use it as a command line tool:</description>
    </item>
    
    <item>
      <title>Advanced INSERT INTO Injection by Taking Advantage of the Primary Key</title>
      <link>http://robinverton.de/blog/2011/06/15/advanced-insert-into-injection-by-taking-advantage-of-the-primary-key/</link>
      <pubDate>Wed, 15 Jun 2011 15:43:42 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2011/06/15/advanced-insert-into-injection-by-taking-advantage-of-the-primary-key/</guid>
      <description>The idea I recently found a security issue in myBloggie. Injeting malicious code into the SQL-statement was quite simple, the only thing you had to do is to bypass the URL-validation regex by submitting a real url merged with an injection string:
// [...] functions.php - line 750-762 function validate_url($url) { if ( ! preg_match(&#39;#^http\\:\\/\\/[a-z0-9\-]+\.([a-z0-9\-]+\.)?[a-z]+#i&#39;, $url, $matches) ) { return false; } else { return true; } } // [.</description>
    </item>
    
    <item>
      <title>myBloggie 2.1.6 SQL Injection and Persistent XSS</title>
      <link>http://robinverton.de/blog/2011/06/01/mybloggie-2.1.6-sql-injection-and-persistent-xss/</link>
      <pubDate>Wed, 01 Jun 2011 15:38:12 +0100</pubDate>
      
      <guid>http://robinverton.de/blog/2011/06/01/mybloggie-2.1.6-sql-injection-and-persistent-xss/</guid>
      <description>Information Software: myBloggie 2.1.6
Severity: High
Author: Robin Verton Date: Jun. 12 2011
Vendor: http://mybloggie.mywebland.com/
Software Description &amp;ldquo;myBloggie is considered one of the most simple, user-friendliest yet packed with features Weblog system available to date.&amp;rdquo;
Issue details myBloggie 2.1.6 is - again - prone to a SQL-Injection vulnerability in the trackback function. It is possible to add a malformed URL to a trackback so malicious code can be injected to insert/read out data from the database.</description>
    </item>
    
  </channel>
</rss>